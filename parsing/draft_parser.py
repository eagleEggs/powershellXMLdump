# utilized post MAML to XML conversion

import xml.etree.ElementTree as et

# XML parsing setup
root = et.parse('ps_man_final.xml')
root2 = root.getroot()

mod = {} # set up modified dict
i = 0 # just for iteration to count modules

# iterate through XML, pull out each command, add to dict
for tag in root2.iter('helpItems'):

    # DETAILS
    for commands in tag.iter('command'):
        i = i + 1
        details = commands.find('details')
        
        # NAME
        name = details.find('name')
        
        # DETAILS DESCRIPTION
        detail_description = details.find('description')
        
        # DESCRIPTION
        description = commands.find('description')
        
        # SYNTAX
        syntax = commands.findall('syntax/syntaxItem/parameter/name')
        syntax_list= []
        for syntax_param in syntax:
            syntax_list.append(syntax_param.text)
            
        modlist = []
        modlist.append(detail_description.text)
        modlist.append(description.text)
        modlist.append(syntax_list)

        mods = {name.text:modlist}
        mod.update(mods)

    print("Total Modules: {}".format(i))
    # print(mod) # to view all

    test = mod.get('Add-Computer') # get the module
    print(test[2]) # parameters to command
    
    # SAPLE OUTPUT:
    
    # {'Add-Computer': ['Add the local computer to a domain or workgroup.\n\n', 'The Add-Computer cmdlet adds the local computer or remote computers to a domain or workgroup, or moves them from one domain to another. It also creates a domain account if the computer is added to the domain without an account.\n\nYou can use the parameters of this cmdlet to specify an organizational unit (OU) and domain controller or to perform an unsecure join.\n\nTo get the results of the command, use the Verbose and PassThru parameters.\n\n', ['DomainName', 'ComputerName', 'Confirm', 'Credential', 'Force', 'LocalCredential', 'NewName', 'OUPath', 'Options', 'PassThru', 'Restart', 'Server', 'UnjoinDomainCredential', 'Unsecure', 'WhatIf', 'WorkgroupName', 'ComputerName', 'Confirm', 'Credential', 'Force', 'LocalCredential', 'NewName', 'PassThru', 'Restart', 'WhatIf']], 'Add-Content': ['Adds content to the specified items, such as adding words to a file.\n\n', 'The Add-Content cmdlet appends content to a specified item or file. You can specify the content by typing the content in the command or by specifying an object that contains the content.\n\n', ['Value', 'Confirm', 'Credential', 'Encoding', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'NoNewline', 'PassThru', 'Stream', 'UseTransaction', 'WhatIf', 'Path', 'Value', 'Confirm', 'Credential', 'Encoding', 'Exclude', 'Filter', 'Force', 'Include', 'NoNewline', 'PassThru', 'Stream', 'UseTransaction', 'WhatIf']], 'Checkpoint-Computer': ['Creates a system restore point on the local computer.\n\n', 'The Checkpoint-Computer cmdlet creates a system restore point on the local computer.\n\nSystem restore points and the Checkpoint-Computer cmdlet are supported only on client operating systems, such as Windows 8, Windows 7, Windows Vista, and Windows XP.\n\nBeginning in Windows 8, Checkpoint-Computer cannot create more than one checkpoint each day.\n\n', ['Description', 'RestorePointType']], 'Clear-Content': ['Deletes the contents of an item, but does not delete the item.\n\n', 'The Clear-Content cmdlet deletes the contents of an item, such as deleting the text from a file, but it does not delete the item. As a result, the item exists, but it is empty. The Clear-Content is similar to Clear-Item, but it works on items with contents, instead of items with values.\n\n', ['Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'Stream', 'UseTransaction', 'WhatIf', 'Path', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'Stream', 'UseTransaction', 'WhatIf']], 'Clear-EventLog': ['Clears all entries from specified event logs on the local or remote computers.\n\n', 'The Clear-EventLog cmdlet removes all of the entries from the specified event logs on the local computer or on remote computers. To use Clear-EventLog , you must be a member of the Administrators group on the affected computer.\n\nThe cmdlets that contain the EventLog noun (the EventLog cmdlets) work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of Windows, use the Get-WinEvent cmdlet.\n\n', ['LogName', 'ComputerName', 'Confirm', 'WhatIf']], 'Clear-Item': ['Clears the contents of an item, but does not delete the item.\n\n', 'The Clear-Item cmdlet clears the content of an item, but it does not delete the item. For example, the Clear-Item cmdlet can delete the value of a variable, but it does not delete the variable. The value that used to represent a cleared item is defined by each Windows PowerShell provider. This cmdlet is similar to Clear-Content, but it works on aliases and variables, instead of files.\n\n', ['Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'UseTransaction', 'WhatIf', 'Path', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'UseTransaction', 'WhatIf']], 'Clear-ItemProperty': ['Clears the value of a property but does not delete the property.\n\n', 'The Clear-ItemProperty cmdlet clears the value of a property, but it does not delete the property. You can use this cmdlet to delete the data from a registry value.\n\n', ['Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'Clear-RecycleBin': ['\n\n', '\n\n', ['DriveLetter', 'Confirm', 'Force', 'WhatIf']], 'Complete-Transaction': ['Commits the active transaction.\n\n', 'The Complete-Transaction cmdlet commits an active transaction. When you commit a transaction, the commands in the transaction are finalized and the data affected by the commands is changed.\n\nIf the transaction includes multiple subscribers, to commit the transaction, you must enter one Complete-Transaction command for every Start-Transaction command.\n\nThe Complete-Transaction cmdlet is one of a set of cmdlets that support the transactions feature in Windows PowerShell. For more information, see about_Transactions.\n\n', ['Confirm', 'WhatIf']], 'Convert-Path': ['Converts a path from a Windows PowerShell path to a Windows PowerShell provider path.\n\n', 'The Convert-Path cmdlet converts a path from a Windows PowerShell path to a Windows PowerShell provider path.\n\n', ['LiteralPath', 'UseTransaction', 'Path', 'UseTransaction']], 'Copy-Item': ['Copies an item from one location to another.\n\n', 'The Copy-Item cmdlet copies an item from one location to another location in the same namespace. For instance, it can copy a file to a folder, but it cannot copy a file to a certificate drive.\n\nThis cmdlet does not cut or delete the items being copied. The particular items that the cmdlet can copy depend on the Windows PowerShell provider that exposes the item. For instance, it can copy files and directories in a file system drive and registry keys and entries in the registry drive.\n\nThis cmdlet can copy and rename items in the same command. To rename an item, enter the new name in the value of the Destination parameter. To rename an item and not copy it, use the Rename-Item cmdlet.\n\n', ['Destination', 'Confirm', 'Container', 'Credential', 'Exclude', 'Filter', 'Force', 'FromSession', 'Include', 'LiteralPath', 'PassThru', 'Recurse', 'ToSession', 'UseTransaction', 'WhatIf', 'Path', 'Destination', 'Confirm', 'Container', 'Credential', 'Exclude', 'Filter', 'Force', 'FromSession', 'Include', 'PassThru', 'Recurse', 'ToSession', 'UseTransaction', 'WhatIf']], 'Copy-ItemProperty': ['Copies a property and value from a specified location to another location.\n\n', 'The Copy-ItemProperty cmdlet copies a property and value from a specified location to another location. For instance, you can use this cmdlet to copy one or more registry entries from one registry key to another registry key.\n\n', ['Destination', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Destination', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'Debug-Process': ['Debugs one or more processes running on the local computer.\n\n', 'The Debug-Process cmdlet attaches a debugger to one or more running processes on a local computer. You can specify the processes by their process name or process ID (PID), or you can pipe process objects to this cmdlet.\n\nThis cmdlet attaches the debugger that is currently registered for the process. Before using this cmdlet, verify that a debugger is downloaded and correctly configured.\n\n', ['Id', 'Confirm', 'WhatIf', 'Confirm', 'InputObject', 'WhatIf', 'Name', 'Confirm', 'WhatIf']], 'Disable-ComputerRestore': ['Disables the System Restore feature on the specified file system drive.\n\n', 'The Disable-ComputerRestore cmdlet turns off the System Restore feature on one or more file system drives. As a result, attempts to restore the computer do not affect the specified drive.\n\nTo disable System Restore on any drive, it must be disabled on the system drive, either first or concurrently.\n\nTo re-enable System Restore, use the Enable-ComputerRestore cmdlet. To find the state of System Restore for each drive, use Rstrui.exe.\n\nSystem restore points and the ComputerRestore cmdlets are supported only on client operating systems, such as Windows 7, Windows Vista, and Windows XP.\n\n', ['Drive', 'Confirm', 'WhatIf']], 'Enable-ComputerRestore': ['Enables the System Restore feature on the specified file system drive.\n\n', 'The Enable-ComputerRestore cmdlet turns on the System Restore feature on one or more file system drives. As a result, you can use tools, such as the Restore-Computer cmdlet, to restore the computer to a previous state.\n\nBy default, System Restore is enabled on all eligible drives, but you can disable it, such as by using the Disable-ComputerRestore cmdlet. To enable (or re-enable) System Restore on any drive, it must be enabled on the system drive, either first or concurrently. To find the state of System Restore for each drive, use Rstrui.exe.\n\nSystem restore points and the ComputerRestore cmdlets are supported only on client operating systems, such as Windows 7, Windows Vista, and Windows XP.\n\n', ['Drive', 'Confirm', 'WhatIf']], 'Get-ChildItem': ['Gets the items and child items in one or more specified locations.\n\n', 'The Get-ChildItem cmdlet gets the items in one or more specified locations. If the item is a container, it gets the items inside the container, known as child items. You can use the Recurse parameter to get items in all child containers.\n\nA location can be a file system location, such as a directory, or a location exposed by a different Windows PowerShell provider, such as a registry hive or a certificate store.\n\n', ['Filter', 'Attributes', 'Depth', 'Directory', 'Exclude', 'File', 'Force', 'Hidden', 'Include', 'LiteralPath', 'Name', 'ReadOnly', 'Recurse', 'System', 'UseTransaction', 'Path', 'Filter', 'Attributes', 'Depth', 'Directory', 'Exclude', 'File', 'Force', 'Hidden', 'Include', 'Name', 'ReadOnly', 'Recurse', 'System', 'UseTransaction']], 'Get-Clipboard': ['Gets the current Windows clipboard entry.\n\n', 'The Get-Clipboard cmdlet gets the current Windows clipboard entry.\n\n', ['Format', 'Raw', 'TextFormatType']], 'Get-ComputerInfo': ['Gets a consolidated object of system and operating system properties.\n\n', 'The Get-ComputerInfo cmdlet gets a consolidated object of system and operating system properties.\n\n', ['Property']], 'Get-ComputerRestorePoint': ['Gets the restore points on the local computer.\n\n', 'The Get-ComputerRestorePoint cmdlet gets the restore points on the local computer. This cmdlet can also display the status of the most recent attempt to restore the computer.\n\nYou can use the information returned by this cmdlet to select a restore point, and you can use the sequence number to identify a restore point for the Restore-Computer cmdlet.\n\nSystem restore points and the Get-ComputerRestorePoint cmdlet are supported only on client operating systems, such as Windows 7, Windows Vista, and Windows XP.\n\n', ['LastStatus', 'RestorePoint']], 'Get-Content': ['Gets the content of the item at the specified location.\n\n', 'The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns a collection of objects, each of which represents a line of content.\n\nBeginning in Windows PowerShell 3.0, this cmdlet can also get a specified number of lines from the beginning or end of an item.\n\n', ['Credential', 'Delimiter', 'Encoding', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'Raw', 'ReadCount', 'Stream', 'Tail', 'TotalCount', 'UseTransaction', 'Wait', 'Path', 'Credential', 'Delimiter', 'Encoding', 'Exclude', 'Filter', 'Force', 'Include', 'Raw', 'ReadCount', 'Stream', 'Tail', 'TotalCount', 'UseTransaction', 'Wait']], 'Get-ControlPanelItem': ['Gets control panel items.\n\n', 'The Get-ControlPanelItem cmdlet gets control panel items on the local computer. You can use it to find control panel items by name, category, or description, even on systems that do not have a user interface.\n\nThis cmdlet gets only the control panel items that can be opened on the system. On computers that do not have Control Panel or File Explorer, this cmdlet gets only control panel items that can open without these components.\n\nThis cmdlet was introduced in Windows PowerShell 3.0. It works only on Windows 8 and Windows Server 2012.\n\n', ['CanonicalName', 'Category', 'Name', 'Category']], 'Get-EventLog': ['Gets the events in an event log, or a list of the event logs, on the local or remote computers.\n\n', 'The Get-EventLog cmdlet gets events and event logs on the local and remote computers.\n\nYou can use the parameters of this cmdlet to search for events by using their property values. This cmdlet gets only the events that match all of the specified property values.\n\nThe cmdlets that contain the EventLog noun work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of Windows, use Get-WinEvent.\n\n', ['LogName', 'InstanceId', 'After', 'AsBaseObject', 'Before', 'ComputerName', 'EntryType', 'Index', 'Message', 'Newest', 'Source', 'UserName', 'AsString', 'ComputerName', 'List']], 'Get-HotFix': ['Gets the hotfixes that have been applied to the local and remote computers.\n\n', 'The Get-Hotfix cmdlet gets hotfixes (also called updates) that have been installed on either the local computer (or on specified remote computers) by Windows Update, Microsoft Update, or Windows Server Update Services; the cmdlet also gets hotfixes or updates that have been installed manually by users.\n\n', ['ComputerName', 'Credential', 'Description', 'Id', 'ComputerName', 'Credential']], 'Get-Item': ['Gets the item at the specified location.\n\n', 'The Get-Item cmdlet gets the item at the specified location. It does not get the contents of the item at the location unless you use a wildcard character (*) to request all the contents of the item.\n\nThis cmdlet is used by Windows PowerShell providers to navigate through different types of data stores.\n\n', ['Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'Stream', 'UseTransaction', 'Path', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'Stream', 'UseTransaction']], 'Get-ItemProperty': ['Gets the properties of a specified item.\n\n', 'The Get-ItemProperty cmdlet gets the properties of the specified items. For example, you can use this cmdlet to get the value of the LastAccessTime property of a file object. You can also use this cmdlet to view registry entries and their values.\n\n', ['Name', 'Credential', 'Exclude', 'Filter', 'Include', 'LiteralPath', 'UseTransaction', 'Path', 'Name', 'Credential', 'Exclude', 'Filter', 'Include', 'UseTransaction']], 'Get-ItemPropertyValue': ['Gets the value for one or more properties of a specified item.\n\n', 'The Get-ItemPropertyValue gets the current value for a property that you specify when you use the Name parameter, located in a path that you specify with either the Path or LiteralPath parameters.\n\n', ['Name', 'Credential', 'Exclude', 'Filter', 'Include', 'LiteralPath', 'UseTransaction', 'Path', 'Name', 'Credential', 'Exclude', 'Filter', 'Include', 'UseTransaction']], 'Get-Location': ['Gets information about the current working location or a location stack.\n\n', 'The Get-Location cmdlet gets an object that represents the current directory, much like the print working directory (pwd) command.\n\nWhen you move between Windows PowerShell drives, Windows PowerShell retains your location in each drive. You can use this cmdlet to find your location in each drive.\n\nYou can use this cmdlet to get the current directory at run time and use it in functions and scripts, such as in a function that displays the current directory in the Windows PowerShell prompt.\n\nYou can also use this cmdlet to display the locations in a location stack. For more information, see the Notes and the descriptions of the Stack and StackName parameters.\n\n', ['PSDrive', 'PSProvider', 'UseTransaction', 'Stack', 'StackName', 'UseTransaction']], 'Get-Process': ['Gets the processes that are running on the local computer or a remote computer.\n\n', 'The Get-Process cmdlet gets the processes on a local or remote computer.\n\nWithout parameters, this cmdlet gets all of the processes on the local computer. You can also specify a particular process by process name or process ID (PID) or pass a process object through the pipeline to this cmdlet.\n\nBy default, this cmdlet returns a process object that has detailed information about the process and supports methods that let you start and stop the process. You can also use the parameters of the Get-Process cmdlet to get file version information for the program that runs in the process and to get the modules that the process loaded.\n\n', ['Name', 'ComputerName', 'FileVersionInfo', 'Module', 'ComputerName', 'FileVersionInfo', 'Id', 'Module', 'ComputerName', 'FileVersionInfo', 'InputObject', 'Module', 'Id', 'IncludeUserName', 'Name', 'IncludeUserName', 'IncludeUserName', 'InputObject']], 'Get-PSDrive': ['Gets drives in the current session.\n\n', 'The Get-PSDrive cmdlet gets the drives in the current session. You can get a particular drive or all drives in the session.\n\nThis cmdlet gets the following types of drives:\n\n- Windows logical drives on the computer, including drives mapped to network shares.\n\n- Drives exposed by Windows PowerShell providers (such as the Certificate:, Function:, and Alias: drives) and the HKLM: and HKCU: drives that are exposed by the Windows PowerShell Registry provider.\n\n- Session-specified temporary drives and persistent mapped network drives that you create by using the New-PSDrive cmdlet.\n\n\n\nBeginning in Windows PowerShell 3.0, the Persist parameter of the New-PSDrive cmdlet can create mapped network drives that are saved on the local computer and are available in other sessions. For more information, see New-PSDrive.\n\nAlso, beginning in Windows PowerShell 3.0, when an external drive is connected to the computer, Windows PowerShell automatically adds a PSDrive to the file system that represents the new drive. You do not need to restart Windows PowerShell. Similarly, when an external drive is disconnected from the computer, Windows PowerShell automatically deletes the PSDrive that represents the removed drive.\n\n', ['LiteralName', 'PSProvider', 'Scope', 'UseTransaction', 'Name', 'PSProvider', 'Scope', 'UseTransaction']], 'Get-PSProvider': ['Gets information about the specified Windows PowerShell provider.\n\n', 'The Get-PSProvider cmdlet gets the Windows PowerShell providers in the current session. You can get a particular drive or all drives in the session.\n\nWindows PowerShell providers let you access a variety of data stores as though they were file system drives. For information about Windows PowerShell providers, see about_Providers.\n\n', ['PSProvider']], 'Get-Service': ['Gets the services on a local or remote computer.\n\n', 'The Get-Service cmdlet gets objects that represent the services on a local computer or on a remote computer, including running and stopped services.\n\nYou can direct this cmdlet to get only particular services by specifying the service name or display name of the services, or you can pipe service objects to this cmdlet.\n\n', ['ComputerName', 'DependentServices', 'DisplayName', 'Exclude', 'Include', 'RequiredServices', 'ComputerName', 'DependentServices', 'Exclude', 'Include', 'InputObject', 'RequiredServices', 'Name', 'ComputerName', 'DependentServices', 'Exclude', 'Include', 'RequiredServices']], 'Get-TimeZone': ['Gets the current time zone or a list of available time zones.\n\n', 'The Get-TimeZone cmdlet gets the current time zone or a list of available time zones.\n\n', ['Id', 'ListAvailable', 'Name']], 'Get-Transaction': ['Gets the current (active) transaction.\n\n', 'The Get-Transaction cmdlet gets an object that represents the current transaction in the session.\n\nThis cmdlet never returns more than one object, because only one transaction is active at a time. If you start one or more independent transactions (by using the Independent parameter of Start-Transaction), the most recently started transaction is active, and that is the transaction that Get-Transaction returns.\n\nWhen all active transactions have either been rolled back or committed, this cmdlet shows the transaction that was most recently active in the session.\n\nThis cmdlet is one of a set of cmdlets that support the transactions feature in Windows PowerShell. For more information, see about_Transactions.\n\n', []], 'Get-WmiObject': ['Gets instances of WMI classes or information about the available classes.\n\n', 'Starting in Windows PowerShell 3.0, this cmdlet has been superseded by Get-CimInstancehttp://technet.microsoft.com/library/jj590758(v=wps.630).aspx.\n\nThe Get-WmiObject cmdlet gets instances of Windows Management Instrumentation (WMI) classes or information about the available WMI classes. To specify a remote computer, use the ComputerName parameter. If the List parameter is specified, the cmdlet gets information about the WMI classes that are available in a specified namespace. If the Query parameter is specified, the cmdlet runs a WMI query language (WQL) statement.\n\nThis cmdlet does not use Windows PowerShell remoting to perform remote operations. You can use the ComputerName parameter of the Get-WmiObject cmdlet even if your computer does not meet the requirements for Windows PowerShellremoting or is not configured for remoting in Windows PowerShell.\n\nBeginning in Windows PowerShell 3.0, the __Server property of the object that Get-WmiObject returns has a PSComputerName alias. This makes it easier to include the source computer name in output and reports.\n\n', ['Class', 'Property', 'Amended', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Credential', 'DirectRead', 'EnableAllPrivileges', 'Filter', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'Class', 'Amended', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'List', 'Locale', 'Namespace', 'Recurse', 'ThrottleLimit', 'Amended', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Credential', 'DirectRead', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'Query', 'ThrottleLimit']], 'Invoke-Item': ['Performs the default action on the specified item.\n\n', 'The Invoke-Item cmdlet performs the default action on the specified item. For example, it runs an executable file or opens a document file in the application associated with the document file type. The default action depends on the type of item and is determined by the Windows PowerShell provider that provides access to the data.\n\n', ['Confirm', 'Credential', 'Exclude', 'Filter', 'Include', 'LiteralPath', 'UseTransaction', 'WhatIf', 'Path', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Include', 'UseTransaction', 'WhatIf']], 'Invoke-WmiMethod': ['Calls WMI methods.\n\n', 'The Invoke-WmiMethod cmdlet calls the methods of Windows Management Instrumentation (WMI) objects.\n\nNew Common Information Model (CIM) cmdlets, introduced in Windows PowerShell 3.0, perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the CIM standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. Instead of using Invoke-WmiMethod , consider using Invoke-CimMethodhttp://go.microsoft.com/fwlink/?LinkId=227965.\n\n', ['Class', 'Name', 'ArgumentList', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'Name', 'ArgumentList', 'AsJob', 'Confirm', 'InputObject', 'ThrottleLimit', 'WhatIf', 'Name', 'ArgumentList', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'Path', 'ThrottleLimit', 'WhatIf', 'Name', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'Name', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'Name', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf']], 'Join-Path': ['Combines a path and a child path into a single path.\n\n', 'The Join-Path cmdlet combines a path and child-path into a single path. The provider supplies the path delimiters.\n\n', ['Path', 'ChildPath', 'Credential', 'Resolve', 'UseTransaction']], 'Limit-EventLog': ['Sets the event log properties that limit the size of the event log and the age of its entries.\n\n', 'The Limit-EventLog cmdlet sets the maximum size of a classic event log, how long each event must be retained, and what happens when the log reaches its maximum size. You can use it to limit the event logs on local or remote computers.\n\nThe cmdlets that contain the EventLog noun (the EventLog cmdlets) work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of Windows, use Get-WinEvent.\n\n', ['LogName', 'ComputerName', 'Confirm', 'MaximumSize', 'OverflowAction', 'RetentionDays', 'WhatIf']], 'Move-Item': ['Moves an item from one location to another.\n\n', 'The Move-Item cmdlet moves an item, including its properties, contents, and child items, from one location to another location. The locations must be supported by the same provider. For example, it can move a file or subdirectory from one directory to another or move a registry subkey from one key to another. When you move an item, it is added to the new location and deleted from its original location.\n\n', ['Destination', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Destination', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'Move-ItemProperty': ['Moves a property from one location to another.\n\n', 'The Move-ItemProperty cmdlet moves a property of an item from one item to another item. For instance, it can move a registry entry from one registry key to another registry key. When you move an item property, it is added to the new location and deleted from its original location.\n\n', ['Destination', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Destination', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'New-EventLog': ['Creates a new event log and a new event source on a local or remote computer.\n\n', 'The New-EventLog cmdlet creates a new classic event log on a local or remote computer. It can also register an event source that writes to the new log or to an existing log.\n\nThe cmdlets that contain the EventLog noun (the EventLog cmdlets) work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of the Windows operating system, use the Get-WinEvent cmdlet.\n\n', ['LogName', 'Source', 'ComputerName', 'CategoryResourceFile', 'MessageResourceFile', 'ParameterResourceFile']], 'New-Item': ['Creates a new item.\n\n', 'The New-Item cmdlet creates a new item and sets its value. The types of items that can be created depend on the location of the item. For example, in the file system, New-Item creates files and folders. In the registry, New-Item creates registry keys and entries. New-Item can also set the value of the items that it creates. For example, when it creates a new file, New-Item can add initial content to the file.\n\n', ['Path', 'Confirm', 'Credential', 'Force', 'ItemType', 'Name', 'UseTransaction', 'Value', 'WhatIf', 'Path', 'Confirm', 'Credential', 'Force', 'ItemType', 'UseTransaction', 'Value', 'WhatIf']], 'New-ItemProperty': ['Creates a new property for an item and sets its value.\n\n', 'The New-ItemProperty cmdlet creates a new property for a specified item and sets its value. Typically, this cmdlet is used to create new registry values, because registry values are properties of a registry key item.\n\nThis cmdlet does not add properties to an object. To add a property to an instance of an object, use the Add-Member cmdlet. To add a property to all objects of a particular type, modify the Types.ps1xml file.\n\n', ['Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PropertyType', 'UseTransaction', 'Value', 'WhatIf', 'Path', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PropertyType', 'UseTransaction', 'Value', 'WhatIf']], 'New-PSDrive': ['Creates temporary and persistent mapped network drives.\n\n', 'The New-PSDrive cmdlet creates temporary and persistent drives that are mapped to or associated with a location in a data store, such as a network drive, a directory on the local computer, or a registry key, and persistent Windows mapped network drives that are associated with a file system location on a remote computer.\n\nTemporary drives exist only in the current Windows PowerShell session and in sessions that you create in the current session. They can have any name that is valid in Windows PowerShell and can be mapped to any local or remote resource. You can use temporary Windows PowerShell drives to access data in the associated data store, just as you would do with any mapped network drive. You can change locations into the drive, by using Set-Location, cd , or chdir , and access the contents of the drive by using Get-Item, Get-ChildItem, or dir .\n\nHowever, because temporary drives are known only to Windows PowerShell, you cannot access them by using File Explorer, Windows Management Instrumentation (WMI), Component Object Model (COM), or the Microsoft .NET Framework, or by using tools such as Net Use.\n\nThe following features are added to New-PSDrive in Windows PowerShell 3.0: \n\n- Mapped network drives. You can use the Persist parameter of New-PSDrive to create Windows mapped network drives. Unlike temporary Windows PowerShell drives, Windows mapped network drives are not session-specific. They are saved in Windows and they can be managed by using standard Windows tools, such as File Explorer and Net Use. Mapped network drives must have a drive-letter name and be connected to a remote file system location. When your command is scoped locally (no dot-sourcing), the Persist parameter does not persist the creation of a PSDrive beyond the scope in which the command is running. If you are running New-PSDrive inside a script, and you want the drive to persist indefinitely, you must dot-source the script. For best results, to force a new drive to persist indefinitely, add the Scope parameter to your command, and set its value to Global.  - External drives. When an external drive is connected to the computer, Windows PowerShell automatically adds a PSDrive to the file system that represents the new drive. You do not have to restart Windows PowerShell. Similarly, when an external drive is disconnected from the computer, Windows PowerShell automatically deletes the PSDrive that represents the removed drive.  - External drives. When an external drive is connected to the computer, Windows PowerShell automatically adds a PSDrive to the file system that represents the new drive. You do not have to restart Windows PowerShell. Similarly, when an external drive is disconnected from the computer, Windows PowerShell automatically deletes the PSDrive that represents the removed drive.  - Credentials for UNC Paths. When the value of the Root parameter is a UNC path, such as \\\\Server\\Share, the credential specified in the value of the Credential parameter is used to create the PSDrive . Otherwise, Credential is not effective when you are creating new file system drives.\n\n', ['Name', 'PSProvider', 'Root', 'Confirm', 'Credential', 'Description', 'Persist', 'Scope', 'UseTransaction', 'WhatIf']], 'New-Service': ['Creates a new Windows service.\n\n', 'The New-Service cmdlet creates a new entry for a Windows service in the registry and in the service database. A new service requires an executable file that runs during the service.\n\nThe parameters of this cmdlet let you set the display name, description, startup type, and dependencies of the service.\n\n', ['Name', 'BinaryPathName', 'Confirm', 'Credential', 'DependsOn', 'Description', 'DisplayName', 'StartupType', 'WhatIf']], 'New-WebServiceProxy': ['Creates a Web service proxy object that lets you use and manage the Web service in Windows PowerShell.\n\n', 'The New-WebServiceProxy cmdlet lets you use a Web service in Windows PowerShell. The cmdlet connects to a Web service and creates a Web service proxy object in Windows PowerShell. You can use the proxy object to manage the Web service.\n\nA Web service is an XML-based program that exchanges data over a network, especially over the Internet. The Microsoft .NET Framework provides Web service proxy objects that represent the Web service as a .NET Framework object.\n\n', ['Uri', 'Class', 'Namespace', 'Credential', 'Uri', 'Class', 'Namespace', 'UseDefaultCredential']], 'Pop-Location': ['Changes the current location to the location most recently pushed onto the stack.\n\n', 'The Pop-Location cmdlet changes the current location to the location most recently pushed onto the stack by using the Push-Location cmdlet. You can pop a location from the default stack or from a stack that you create by using a Push-Location command.\n\n', ['PassThru', 'StackName', 'UseTransaction']], 'Push-Location': ['Adds the current location to the top of a location stack.\n\n', 'The Push-Location cmdlet adds, or pushes, the current location onto a location stack. If you specify a path, this cmdlet pushes the current location onto a location stack and then changes the current location to the location specified by the path. You can use the Pop-Location cmdlet to get locations from the location stack.\n\nBy default, Push-Location pushes the current location onto the current location stack, but you can use the StackName parameter to specify another location stack. If the stack does not exist, Push-Location creates it.\n\nFor more information about location stacks, see the Notes.\n\n', ['LiteralPath', 'PassThru', 'StackName', 'UseTransaction', 'Path', 'PassThru', 'StackName', 'UseTransaction']], 'Register-WmiEvent': ['Subscribes to a Windows Management Instrumentation (WMI) event.\n\n', 'The Register-WmiEvent cmdlet subscribes to Windows Management Instrumentation (WMI) events on the local computer or on a remote computer.\n\nWhen the subscribed WMI event is raised, it is added to the event queue in your local session even if the event occurs on a remote computer. To get events in the event queue, use the Get-Eventcmdlet.\n\nYou can use the parameters of Register-WmiEvent to subscribe to events on remote computers and to specify the property values of the events that can help you identify the event in the queue. You can also use the Action parameter to specify actions to take when a subscribed event is raised.\n\nWhen you subscribe to an event, an event subscriber is added to your session. To get the event subscribers in the session, use the Get-EventSubscriber cmdlet. To cancel the subscription, use the Unregister-Event cmdlet, which deletes the event subscriber from the session.\n\nNew Common Information Model (CIM) cmdlets, introduced Windows PowerShell 3.0, perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the CIM standard, which enables the cmdlets to use the same techniques to manage computers that run the Windows operating system and those that run other operating systems. Instead of using Register-WmiEvent , consider using the Register-CimIndicationEventhttp://go.microsoft.com/fwlink/?LinkId=227960 cmdlet.\n\n', ['Class', 'SourceIdentifier', 'Action', 'ComputerName', 'Credential', 'Forward', 'MaxTriggerCount', 'MessageData', 'Namespace', 'SupportEvent', 'Timeout', 'Query', 'SourceIdentifier', 'Action', 'ComputerName', 'Credential', 'Forward', 'MaxTriggerCount', 'MessageData', 'Namespace', 'SupportEvent', 'Timeout']], 'Remove-Computer': ['Removes the local computer from its domain.\n\n', 'The Remove-Computer cmdlet removes the local computer and remote computers from their current domains.\n\nWhen you remove a computer from a domain, Remove-Computer also disables the domain account of the computer. You must provide explicit credentials to unjoin the computer from its domain, even when they are the credentials of the current user. You must restart the computer to make the change effective. Also, when you remove a computer from a domain, you must move it to a workgroup. Use the WorkgroupName parameter to specify the workgroup.\n\nTo move a computer from a workgroup to a domain, from one workgroup to another, or from one domain to another, use the Add-Computer cmdlet.\n\nTo get the results of the command, use the Verbose and PassThru parameters. To suppress the user prompt, use the Force parameter. Remove-Computer removes the local computer and remote computers from domains. It includes credential parameters that specify alternate credentials for connecting to remote computers, and unjoining from a domain, a Restart parameter for restarting the affected computers, and a WorkgroupName parameter for specifying the name of the workgroup to which computers are added.\n\n', ['UnjoinDomainCredential', 'ComputerName', 'Confirm', 'Force', 'LocalCredential', 'PassThru', 'Restart', 'WhatIf', 'WorkgroupName', 'UnjoinDomainCredential', 'Confirm', 'Force', 'PassThru', 'Restart', 'WhatIf', 'WorkgroupName']], 'Remove-EventLog': ['Deletes an event log or unregisters an event source.\n\n', 'The Remove-EventLog cmdlet deletes an event log file from a local or remote computer and unregisters all its event sources for the log. You can also use this cmdlet to unregister event sources without deleting any event logs.\n\nThe cmdlets that contain the EventLog noun, the EventLog cmdlets, work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of the Windows operating system, use Get-WinEvent.\n\nCAUTION: This cmdlet can delete operating system event logs, which might cause application failures and unexpected system behavior.\n\n', ['LogName', 'ComputerName', 'Confirm', 'WhatIf', 'ComputerName', 'Confirm', 'Source', 'WhatIf']], 'Remove-Item': ['Deletes the specified items.\n\n', 'The Remove-Item cmdlet deletes one or more items. Because it is supported by many providers, it can delete many different types of items, including files, folders, registry keys, variables, aliases, and functions.\n\n', ['Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'Recurse', 'Stream', 'UseTransaction', 'WhatIf', 'Path', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'Recurse', 'Stream', 'UseTransaction', 'WhatIf']], 'Remove-ItemProperty': ['Deletes the property and its value from an item.\n\n', 'The Remove-ItemProperty cmdlet deletes a property and its value from an item. You can use it to delete registry values and the data that they store.\n\n', ['Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'UseTransaction', 'WhatIf', 'Path', 'Name', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'UseTransaction', 'WhatIf']], 'Remove-PSDrive': ['Deletes temporary Windows PowerShell drives and disconnects mapped network drives.\n\n', 'The Remove-PSDrive cmdlet deletes temporary Windows PowerShell drives that were created by using the New-PSDrive cmdlet.\n\nStarting in Windows PowerShell 3.0, Remove-PSDrive also disconnects mapped network drives, including, but not limited to, drives created by using the Persist parameter of New-PSDrive . Remove-PSDrive cannot delete Windows physical or logical drives.\n\nStarting in Windows PowerShell 3.0, when an external drive is connected to the computer, Windows PowerShell automatically adds a PSDrive to the file system that represents the new drive. You do not have to restart Windows PowerShell. Similarly, when an external drive is disconnected from the computer, Windows PowerShell automatically deletes the PSDrive that represents the removed drive.\n\n', ['LiteralName', 'Confirm', 'Force', 'PSProvider', 'Scope', 'UseTransaction', 'WhatIf', 'Name', 'Confirm', 'Force', 'PSProvider', 'Scope', 'UseTransaction', 'WhatIf']], 'Remove-WmiObject': ['Deletes an instance of an existing Windows Management Instrumentation (WMI) class.\n\n', 'The Remove-WmiObject cmdlet deletes an instance of an existing Windows Management Instrumentation (WMI)class.\n\n', ['Class', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'Path', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Confirm', 'InputObject', 'ThrottleLimit', 'WhatIf']], 'Rename-Computer': ['Renames a computer.\n\n', 'The Rename-Computer cmdlet renames the local computer or a remote computer. It renames one computer in each command.\n\nThis cmdlet was introduced in Windows PowerShell 3.0.\n\n', ['NewName', 'ComputerName', 'Confirm', 'DomainCredential', 'Force', 'LocalCredential', 'PassThru', 'Protocol', 'Restart', 'WhatIf', 'WsmanAuthentication']], 'Rename-Item': ['Renames an item in a Windows PowerShell provider namespace.\n\n', 'The Rename-Item cmdlet changes the name of a specified item. This cmdlet does not affect the content of the item being renamed.\n\nYou cannot use Rename-Item to move an item, such as by specifying a path together with the new name. To move and rename an item, use the Move-Item cmdlet.\n\n', ['NewName', 'Confirm', 'Credential', 'Force', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'NewName', 'Confirm', 'Credential', 'Force', 'PassThru', 'UseTransaction', 'WhatIf']], 'Rename-ItemProperty': ['Renames a property of an item.\n\n', 'The Rename-ItemProperty cmdlet changes the name of a specified item property. The value of the property is not changed. For example, you can use Rename-ItemProperty to change the name of a registry entry.\n\n', ['Name', 'NewName', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Name', 'NewName', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'Reset-ComputerMachinePassword': ['Resets the machine account password for the computer.\n\n', 'The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain. You can use it to reset the password of the local computer.\n\n', ['Confirm', 'Credential', 'Server', 'WhatIf']], 'Resolve-Path': ['Resolves the wildcard characters in a path, and displays the path contents.\n\n', 'The Resolve-Path cmdlet interprets the wildcard characters in a path and displays the items and containers at the location specified by the path, such as the files and folders or registry keys and subkeys.\n\n', ['Credential', 'LiteralPath', 'Relative', 'UseTransaction', 'Path', 'Credential', 'Relative', 'UseTransaction']], 'Restart-Computer': ['Restarts ("reboots") the operating system on local and remote computers.\n\n', 'The Restart-Computer cmdlet restarts the operating system on the local and remote computers.\n\nYou can use the parameters of Restart-Computer to run the restart operations as a background job, to specify the authentication levels and alternate credentials, to limit the operations that run at the same time, and to force an immediate restart.\n\nStarting in Windows PowerShell 3.0, you can wait for the restart to complete before you run the next command, specify a waiting time-out and query interval, and wait for particular services to be available on the restarted computer. This feature makes it practical to use Restart-Computer in scripts and functions. You can also use the WSMan protocol to restart the computer, in case DCOM calls are blocked, such as by an enterprise firewall.\n\nThis cmdlet requires Windows PowerShell remoting only when you use the AsJob parameter in a command.\n\n', ['ComputerName', 'Credential', 'AsJob', 'Confirm', 'DcomAuthentication', 'Force', 'Impersonation', 'ThrottleLimit', 'WhatIf', 'ComputerName', 'Credential', 'Confirm', 'DcomAuthentication', 'Delay', 'For', 'Force', 'Impersonation', 'Protocol', 'Timeout', 'Wait', 'WhatIf', 'WsmanAuthentication']], 'Restart-Service': ['Stops and then starts one or more services.\n\n', 'The Restart-Service cmdlet sends a stop message and then a start message to the Windows Service Controller for a specified service. If a service was already stopped, it is started without notifying you of an error. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass an object that represents each service that you want to restart.\n\n', ['Confirm', 'DisplayName', 'Exclude', 'Force', 'Include', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'Exclude', 'Force', 'Include', 'PassThru', 'WhatIf', 'Name', 'Confirm', 'Exclude', 'Force', 'Include', 'PassThru', 'WhatIf']], 'Restore-Computer': ['Starts a system restore on the local computer.\n\n', 'The Restore-Computer cmdlet restores the local computer to the specified system restore point. Restore-Computer restarts the computer. The restore is completed during the restart operation.\n\nSystem restore points and Restore-Computer are supported only on client operating systems, such as Windows 7, Windows Vista, and Windows XP.\n\n', ['RestorePoint', 'Confirm', 'WhatIf']], 'Resume-Service': ['Resumes one or more suspended (paused) services.\n\n', 'The Resume-Service cmdlet sends a resume message to the Windows Service Controller for each of the specified services. If a service is suspended, it resumes. If it is currently running, the message is ignored. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass a service object that represents the services that you want to resume.\n\n', ['Confirm', 'DisplayName', 'Exclude', 'Include', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'Exclude', 'Include', 'PassThru', 'WhatIf', 'Name', 'Confirm', 'Exclude', 'Include', 'PassThru', 'WhatIf']], 'Set-Clipboard': ['Sets the current Windows clipboard entry.\n\n', 'The Set-Clipboard cmdlet sets the current Windows clipboard entry.\n\n', ['Append', 'AsHtml', 'Confirm', 'LiteralPath', 'WhatIf', 'Append', 'AsHtml', 'Confirm', 'Path', 'WhatIf', 'Value', 'Append', 'AsHtml', 'Confirm', 'WhatIf']], 'Set-Content': ['Writes or replaces the content in an item with new content.\n\n', 'The Set-Content cmdlet is a string-processing cmdlet that writes or replaces the content in the specified item, such as a file. Whereas the Add-Content cmdlet appends content to a file, Set-Content replaces the existing content. You can type the content in the command or send content through the pipeline to Set-Content .\n\n', ['Value', 'Confirm', 'Credential', 'Encoding', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'NoNewline', 'PassThru', 'Stream', 'UseTransaction', 'WhatIf', 'Path', 'Value', 'Confirm', 'Credential', 'Encoding', 'Exclude', 'Filter', 'Force', 'Include', 'NoNewline', 'PassThru', 'Stream', 'UseTransaction', 'WhatIf']], 'Set-Item': ['Changes the value of an item to the value specified in the command.\n\n', 'The Set-Item cmdlet changes the value of an item, such as a variable or registry key, to the value specified in the command.\n\n', ['Value', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Value', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'Set-ItemProperty': ['Creates or changes the value of a property of an item.\n\n', 'The Set-ItemProperty cmdlet changes the value of the property of the specified item. You can use the cmdlet to establish or change the properties of items. For example, you can use Set-ItemProperty to set the value of the IsReadOnly property of a file object to $True.\n\nYou also use Set-ItemProperty to create and change registry values and data. For example, you can add a new registry entry to a key and establish or change its value.\n\n', ['Path', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'InputObject', 'PassThru', 'UseTransaction', 'WhatIf', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'InputObject', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Name', 'Value', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'LiteralPath', 'PassThru', 'UseTransaction', 'WhatIf', 'Path', 'Name', 'Value', 'Confirm', 'Credential', 'Exclude', 'Filter', 'Force', 'Include', 'PassThru', 'UseTransaction', 'WhatIf']], 'Set-Location': ['Sets the current working location to a specified location.\n\n', 'The Set-Location cmdlet sets the working location to a specified location. That location could be a directory, a sub-directory, a registry location, or any provider path.\n\nYou can also use the StackName parameter of to make a named location stack the current location stack. For more information about location stacks, see the Notes.\n\n', ['LiteralPath', 'PassThru', 'UseTransaction', 'Path', 'PassThru', 'UseTransaction', 'PassThru', 'StackName', 'UseTransaction']], 'Set-Service': ['Starts, stops, and suspends a service, and changes its properties.\n\n', 'The Set-Service cmdlet changes the properties of a local or remote service. This includes the status, description, display name, and start mode. You can use this cmdlet to start, stop, or suspend, or pause, a service. To identify the service, enter its service name or submit a service object, or pipe a service name or service object to Set-Service .\n\n', ['ComputerName', 'Confirm', 'Description', 'DisplayName', 'InputObject', 'PassThru', 'StartupType', 'Status', 'WhatIf', 'Name', 'ComputerName', 'Confirm', 'Description', 'DisplayName', 'PassThru', 'StartupType', 'Status', 'WhatIf']], 'Set-TimeZone': ['Sets the system time zone to a specified time zone.\n\n', 'The Set-TimeZone cmdlet sets the system time zone to a specified time zone.\n\n', ['Confirm', 'Id', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'PassThru', 'WhatIf', 'Name', 'Confirm', 'PassThru', 'WhatIf']], 'Set-WmiInstance': ['Creates or updates an instance of an existing Windows Management Instrumentation (WMI) class.\n\n', 'The Set-WmiInstance cmdlet creates or updates an instance of an existing Windows Management Instrumentation (WMI) class. The created or updated instance is written to the WMI repository.\n\nNew CIM cmdlets, introduced Windows PowerShell 3.0, perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard. this enables cmdlets to use the same techniques to manage Windows-based computers and those running other operating systems. Instead of using Set-WmiInstance , consider using the Set-CimInstancehttp://go.microsoft.com/fwlink/?LinkId=227962 or New-CimInstancehttp://go.microsoft.com/fwlink/?LinkId=227963 cmdlets.\n\n', ['Class', 'Arguments', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'PutType', 'ThrottleLimit', 'WhatIf', 'Arguments', 'AsJob', 'Confirm', 'InputObject', 'PutType', 'ThrottleLimit', 'WhatIf', 'Arguments', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'Path', 'PutType', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'PutType', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'PutType', 'ThrottleLimit', 'WhatIf', 'AsJob', 'Authentication', 'Authority', 'ComputerName', 'Confirm', 'Credential', 'EnableAllPrivileges', 'Impersonation', 'Locale', 'Namespace', 'PutType', 'ThrottleLimit', 'WhatIf']], 'Show-ControlPanelItem': ['Opens control panel items.\n\n', 'The Show-ControlPanelItem cmdlet opens control panel items on the local computer. You can use it to open control panel items by name, category, or description, even on systems that do not have a user interface. You can pipe control panel items from the Get-ControlPanelItem cmdlet to Show-ControlPanelItem . Show-ControlPanelItem searches only control panel items that can be opened on the system. On computers that do not have Control Panel or File Explorer , Show-ControlPanelItem searches only control panel items that can open without these components.\n\nThis cmdlet was introduced in Windows PowerShell 3.0. It works only on Windows 8 and Windows Server 2012. Because this cmdlet requires a user interface, it does not work on Server Core installations of Windows Server.\n\n', ['CanonicalName', 'InputObject', 'Name']], 'Show-EventLog': ['Displays the event logs of the local or a remote computer in Event Viewer.\n\n', 'The Show-EventLog cmdlet opens Event Viewer on the local computer and displays in it all of the classic event logs on the local computer or a remote computer.\n\nTo open Event Viewer on Windows Vista and later versions of the Windows operating system, the current user must be a member of the Administrators group on the local computer.\n\nThe cmdlets that contain the EventLog noun (the EventLog cmdlets) work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of the Windows operating system, use the Get-WinEvent cmdlet.\n\n', ['ComputerName']], 'Split-Path': ['Returns the specified part of a path.\n\n', 'The Split-Path cmdlet returns only the specified part of a path, such as the parent folder, a subfolder, or a file name. It can also get items that are referenced by the split path and tell whether the path is relative or absolute.\n\nYou can use this cmdlet to get or submit only a selected part of a path.\n\n', ['Path', 'Credential', 'IsAbsolute', 'Resolve', 'UseTransaction', 'Path', 'Credential', 'Leaf', 'Resolve', 'UseTransaction', 'Credential', 'LiteralPath', 'Resolve', 'UseTransaction', 'Path', 'Credential', 'NoQualifier', 'Resolve', 'UseTransaction', 'Path', 'Credential', 'Parent', 'Resolve', 'UseTransaction', 'Path', 'Qualifier', 'Credential', 'Resolve', 'UseTransaction']], 'Start-Process': ['Starts one or more processes on the local computer.\n\n', 'The Start-Process cmdlet starts one or more processes on the local computer. To specify the program that runs in the process, enter an executable file or script file, or a file that can be opened by using a program on the computer. If you specify a non-executable file, Start-Process starts the program that is associated with the file, similar to the Invoke-Item cmdlet.\n\nYou can use the parameters of Start-Process to specify options, such as loading a user profile, starting the process in a new window, or using alternate credentials.\n\n', ['FilePath', 'ArgumentList', 'Credential', 'LoadUserProfile', 'NoNewWindow', 'PassThru', 'RedirectStandardError', 'RedirectStandardInput', 'RedirectStandardOutput', 'UseNewEnvironment', 'Wait', 'WindowStyle', 'WorkingDirectory', 'FilePath', 'ArgumentList', 'PassThru', 'Verb', 'Wait', 'WindowStyle', 'WorkingDirectory']], 'Start-Service': ['Starts one or more stopped services.\n\n', 'The Start-Service cmdlet sends a start message to the Windows Service Controller for each of the specified services. If a service is already running, the message is ignored without error. You can specify the services by their service names or display names, or you can use the InputObject parameter to supply a service object that represents the services that you want to start.\n\n', ['Confirm', 'DisplayName', 'Exclude', 'Include', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'Exclude', 'Include', 'PassThru', 'WhatIf', 'Name', 'Confirm', 'Exclude', 'Include', 'PassThru', 'WhatIf']], 'Start-Transaction': ['Starts a transaction.\n\n', 'The Start-Transaction cmdlet starts a transaction, which is a series of commands that are managed as a unit. A transaction can be completed, or committed. Alternatively, it can be completely undone, or rolled back, so that any data changed by the transaction is restored to its original state. Because the commands in a transaction are managed as a unit, either all commands are committed or all commands are rolled back.\n\nBy default, if any command in the transaction generates an error, transactions are rolled back automatically. You can use the RollbackPreference parameter to change this behavior.\n\nThe cmdlets used in a transaction must be designed to support transactions. Cmdlets that support transactions have a UseTransaction parameter. To perform transactions in a provider, the provider must support transactions. The Windows PowerShell Registry provider in Windows Vista and later versions of the Windows operating system supports transactions. You can also use the Microsoft.PowerShell.Commands.Management.TransactedString class to include expressions in transactions on any version of the Windows system that supports Windows PowerShell. Other Windows PowerShell providers can also support transactions.\n\nOnly one transaction can be active at a time. If you start a new, independent transaction while a transaction is in progress, the new transaction becomes the active transaction, and you must commit or roll back the new transaction before you make any changes to the original transaction. Start-Transaction cmdlet is one of a set of cmdlets that support the transactions feature in Windows PowerShell. For more information, see about_Transactions.\n\n', ['Confirm', 'Independent', 'RollbackPreference', 'Timeout', 'WhatIf']], 'Stop-Computer': ['Stops (shuts down) local and remote computers.\n\n', 'The Stop-Computer cmdlet shuts down computers remotely. It can also shut down the local computer.\n\nYou can use the parameters of Stop-Computer to run the shutdown operations as a background job, to specify the authentication levels and alternate credentials, to limit the concurrent connections that are created to run the command, and to force an immediate shut down.\n\nThis cmdlet does not require Windows PowerShell remoting unless you use the AsJob parameter.\n\n', ['ComputerName', 'Credential', 'AsJob', 'Confirm', 'DcomAuthentication', 'Force', 'Impersonation', 'Protocol', 'ThrottleLimit', 'WhatIf', 'WsmanAuthentication']], 'Stop-Process': ['Stops one or more running processes.\n\n', 'The Stop-Process cmdlet stops one or more running processes. You can specify a process by process name or process ID (PID), or pass a process object to Stop-Process . Stop-Process works only on processes running on the local computer.\n\nOn Windows Vista and later versions of the Windows operating system, to stop a process that is not owned by the current user, you must start Windows PowerShell by using the Run as administrator option. Also, you are prompted for confirmation unless you specify the Force parameter.\n\n', ['Id', 'Confirm', 'Force', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'Force', 'PassThru', 'WhatIf', 'Confirm', 'Force', 'Name', 'PassThru', 'WhatIf']], 'Stop-Service': ['Stops one or more running services.\n\n', 'The Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass a service object that represents the service that you want to stop.\n\n', ['Confirm', 'DisplayName', 'Exclude', 'Force', 'Include', 'NoWait', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'Exclude', 'Force', 'Include', 'NoWait', 'PassThru', 'WhatIf', 'Name', 'Confirm', 'Exclude', 'Force', 'Include', 'NoWait', 'PassThru', 'WhatIf']], 'Suspend-Service': ['Suspends (pauses) one or more running services.\n\n', 'The Suspend-Service cmdlet sends a suspend message to the Windows Service Controller for each of the specified services. While suspended, the service is still running, but its action is stopped until resumed, such as by usingthe Resume-Service cmdlet. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass a service object that represents the services that you want to suspend.\n\n', ['Confirm', 'DisplayName', 'Exclude', 'Include', 'PassThru', 'WhatIf', 'InputObject', 'Confirm', 'Exclude', 'Include', 'PassThru', 'WhatIf', 'Name', 'Confirm', 'Exclude', 'Include', 'PassThru', 'WhatIf']], 'Test-ComputerSecureChannel': ['Tests and repairs the secure channel between the local computer and its domain.\n\n', 'The Test-ComputerSecureChannel cmdlet verifies that the channel between the local computer and its domain is working correctly by checking the status of its trust relationships. If a connection fails, you can use the Repair parameter to try to restore it. Test-ComputerSecureChannel returns $True if the channel is working correctly and $False if it is not. This result lets you use the cmdlet in conditional statements in functions and scripts. To get more detailed test results, use the Verbose parameter.\n\nThis cmdlet works much like NetDom.exe. Both NetDom and Test-ComputerSecureChannel use the NetLogon service to perform the actions.\n\n', ['Confirm', 'Credential', 'Repair', 'Server', 'WhatIf']], 'Test-Connection': ['Sends ICMP echo request packets ("pings") to one or more computers.\n\n', 'The Test-Connection cmdlet sends Internet Control Message Protocol (ICMP) echo request packets, or pings, to one or more remote computers and returns the echo response replies. You can use this cmdlet to determine whether a particular computer can be contacted across an IP network.\n\nYou can use the parameters of Test-Connection to specify both the sending and receiving computers, to run the command as a background job, to set a time-out and number of pings, and to configure the connection and authentication.\n\nUnlike the familiar ping command, Test-Connection returns a Win32_PingStatus object that you can investigate in Windows PowerShell. You can use the Quiet parameter to force it to return only a Boolean value.\n\n', ['ComputerName', 'AsJob', 'BufferSize', 'Count', 'DcomAuthentication', 'Delay', 'Impersonation', 'Protocol', 'ThrottleLimit', 'TimeToLive', 'WsmanAuthentication', 'ComputerName', 'Source', 'AsJob', 'BufferSize', 'Count', 'Credential', 'DcomAuthentication', 'Delay', 'Impersonation', 'Protocol', 'ThrottleLimit', 'TimeToLive', 'WsmanAuthentication', 'ComputerName', 'BufferSize', 'Count', 'DcomAuthentication', 'Delay', 'Impersonation', 'Protocol', 'Quiet', 'TimeToLive', 'WsmanAuthentication']], 'Test-Path': ['Determines whether all elements of a path exist.\n\n', 'The Test-Path cmdlet determines whether all elements of the path exist. It returns $True if all elements exist and $False if any are missing. It can also tell whether the path syntax is valid and whether the path leads to a container or a terminal or leaf element.\n\n', ['Credential', 'Exclude', 'Filter', 'Include', 'IsValid', 'LiteralPath', 'NewerThan', 'OlderThan', 'PathType', 'UseTransaction', 'Path', 'Credential', 'Exclude', 'Filter', 'Include', 'IsValid', 'NewerThan', 'OlderThan', 'PathType', 'UseTransaction']], 'Undo-Transaction': ['Rolls back the active transaction.\n\n', 'The Undo-Transaction cmdlet rolls back the active transaction. When you roll back a transaction, the changes that were made by the commands in the transaction are discarded and the data is restored to its original form.\n\nIf the transaction includes multiple subscribers, an Undo-Transaction command rolls back the whole transaction for all subscribers.\n\nBy default, transactions are rolled back automatically if any command in the transaction generates an error. However, transactions can be started by using a different rollback preference and you can use this cmdlet to roll back the active transaction at any time.\n\nThe Undo-Transaction cmdlet is one of a set of cmdlets that support the transactions feature in Windows PowerShell. For more information, see about_Transactions.\n\n', ['Confirm', 'WhatIf']], 'Use-Transaction': ['Adds the script block to the active transaction.\n\n', 'The Use-Transaction cmdlet adds a script block to an active transaction. This enables you to do transacted scripting by using transaction-enabled Microsoft .NET Framework objects. The script block can contain only transaction-enabled .NET Framework objects, such as instances of the Microsoft.PowerShell.Commands.Management.TransactedString class.\n\nThe UseTransaction parameter, which is optional for most cmdlets, is required when you use this cmdlet. Use-Transaction is one of a set of cmdlets that support the transactions feature in Windows PowerShell. For more information, see about_Transactions.\n\n', ['TransactedScript', 'UseTransaction']], 'Wait-Process': ['Waits for the processes to be stopped before accepting more input.\n\n', 'The Wait-Process cmdlet waits for one or more running processes to be stopped before accepting input. In the Windows PowerShell console, this cmdlet suppresses the command prompt until the processes are stopped. You can specify a process by process name or process ID (PID), or pipe a process object to Wait-Process . Wait-Process works only on processes running on the local computer.\n\n', ['Id', 'Timeout', 'Timeout', 'InputObject', 'Name', 'Timeout']], 'Write-EventLog': ['Writes an event to an event log.\n\n', 'The Write-EventLog cmdlet writes an event to an event log.\n\nTo write an event to an event log, the event log must exist on the computer and the source must be registered for the event log.\n\nThe cmdlets that contain the EventLog noun (the EventLog cmdlets) work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of the Windows operating system, use the Get-WinEvent cmdlet.\n\n', ['LogName', 'Source', 'EventId', 'EntryType', 'Message', 'Category', 'ComputerName', 'RawData']]}
    # ['DomainName', 'ComputerName', 'Confirm', 'Credential', 'Force', 'LocalCredential', 'NewName', 'OUPath', 'Options', 'PassThru', 'Restart', 'Server', 'UnjoinDomainCredential', 'Unsecure', 'WhatIf', 'WorkgroupName', 'ComputerName', 'Confirm', 'Credential', 'Force', 'LocalCredential', 'NewName', 'PassThru', 'Restart', 'WhatIf']
